class Solution {
public:
double possible(vector<int>& dist, int mid){
     double sum=0.0;
     for(int i=0;i<dist.size()-1;i++){
         double s=(double)dist[i]/(double)mid;
     sum+=ceil(s);
     }
     sum+=(double)dist[dist.size()-1]/(double)mid;
     return sum;
}
    int minSpeedOnTime(vector<int>& dist, double hour) {
        int l=1;int r=1e7;
        int min_speed=-1;
        while(l<=r){
        int mid=l+(r-l)/2;
            if(possible(dist,mid)<=hour){
                min_speed=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return min_speed;
    }
};
